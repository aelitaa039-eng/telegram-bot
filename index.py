import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
import datetime
import time
import json
import os
from dotenv import load_dotenv
# –¢–æ–∫–µ–Ω –æ—Ç BotFather

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if ADMIN_ID:
    ADMIN_ID = int(ADMIN_ID)

bot = telebot.TeleBot(TOKEN)

DATA_FILE = "subscribers.json"
QUESTIONS_FILE = "questions.json"
CONFIRM_FILE = "confirmations.json"

# --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
def load_json(file, default):
    if os.path.exists(file):
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    return default

def save_json(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

subscribers = load_json(DATA_FILE, {})
questions = load_json(QUESTIONS_FILE, [])
confirmations = load_json(CONFIRM_FILE, [])

pending_name = set()
pending_question = set()

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ê–ª–º–∞—Ç—ã
tz = pytz.timezone("Asia/Almaty")

# --- –ö–ù–û–ü–ö–ò ---
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(KeyboardButton("üìù –°–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"))
    markup.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤"))
    markup.add(KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
    markup.add(KeyboardButton("/stop"))
    return markup

def start_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(KeyboardButton("/start"))
    return markup

# --- –ö–û–ú–ê–ù–î–´ ---
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = str(message.chat.id)
    # bot.send_message(chat_id, f"–¢–≤–æ–π chat_id: `{chat_id}`", parse_mode="Markdown")

    if chat_id in subscribers:
        bot.send_message(chat_id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {subscribers[chat_id]['name']} üëã", reply_markup=main_menu())
    else:
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç üëã –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é*:", parse_mode="Markdown",
                         reply_markup=ReplyKeyboardRemove())
        pending_name.add(chat_id)

@bot.message_handler(commands=['stop'])
def stop(message):
    chat_id = str(message.chat.id)
    if chat_id in subscribers:
        del subscribers[chat_id]
        save_json(DATA_FILE, subscribers)
        bot.send_message(chat_id, "–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚ùå", reply_markup=start_menu())
    else:
        bot.send_message(chat_id, "–¢—ã –µ—â—ë –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω.", reply_markup=start_menu())

# --- –í–í–û–î –ò–ú–ï–ù–ò ---
@bot.message_handler(func=lambda m: str(m.chat.id) in pending_name)
def get_name(message):
    chat_id = str(message.chat.id)
    full_name = message.text.strip()
    if len(full_name.split()) < 2:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚úçÔ∏è", parse_mode="Markdown")
        return

    subscribers[chat_id] = {"name": full_name, "last_confirm": None}
    save_json(DATA_FILE, subscribers)
    pending_name.discard(chat_id)

    bot.send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ, {full_name}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –º–µ–Ω—é ‚è∞", reply_markup=main_menu())
    send_reminder(chat_id)

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ---
@bot.message_handler(func=lambda m: m.text == "üìù –°–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
def change_name(message):
    chat_id = str(message.chat.id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é ‚úçÔ∏è", reply_markup=ReplyKeyboardRemove())
    pending_name.add(chat_id)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤")
def confirm_from_menu(message):
    confirm_done_manual(message)

@bot.message_handler(func=lambda m: m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question(message):
    chat_id = str(message.chat.id)
    bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è", reply_markup=ReplyKeyboardRemove())
    pending_question.add(chat_id)

# --- –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–û–í ---
@bot.message_handler(func=lambda m: str(m.chat.id) in pending_question)
def receive_question(message):
    chat_id = str(message.chat.id)
    user_name = subscribers.get(chat_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    question_text = message.text.strip()

    entry = {"chat_id": chat_id, "name": user_name, "question": question_text}
    questions.append(entry)
    save_json(QUESTIONS_FILE, questions)

    pending_question.discard(chat_id)
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=main_menu())

    if ADMIN_ID:
        try:
            bot.send_message(ADMIN_ID, f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {user_name}:\n\n{question_text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

# --- –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ---
def send_reminder(chat_id):
    bot.send_message(chat_id, "‚è∞ –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —á–∞—Å—ã!", reply_markup=main_menu())

def confirm_done_manual(message):
    chat_id = str(message.chat.id)
    user_name = subscribers.get(chat_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    username = message.from_user.username if message.from_user.username else "–ë–µ–∑ –ª–æ–≥–∏–Ω–∞"

    today = datetime.datetime.now(tz)
    today_str = today.strftime("%d.%m.%Y")
    month_key = today.strftime("%m.%Y")

    entry = {
        "chat_id": chat_id,
        "name": user_name,
        "username": username,
        "date": today_str
    }
    confirmations.append(entry)
    save_json(CONFIRM_FILE, confirmations)

    if chat_id in subscribers:
        subscribers[chat_id]["last_confirm"] = month_key
        save_json(DATA_FILE, subscribers)

    bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ üëç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.", reply_markup=main_menu())

    if ADMIN_ID:
        try:
            bot.send_message(ADMIN_ID, f"‚úÖ {user_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

# --- –†–ê–°–°–´–õ–ö–ê –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ ---
def send_reminders():
    today = datetime.datetime.now(tz)
    month_key = today.strftime("%m.%Y")

    last_day = (today.replace(day=28) + datetime.timedelta(days=4)).replace(day=1) - datetime.timedelta(days=1)
    last_day_of_month = last_day.day

    if 27 <= today.day <= last_day_of_month:
        for chat_id, data in list(subscribers.items()):
            last_confirm = data.get("last_confirm")
            if last_confirm == month_key:  # —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
                continue
            try:
                send_reminder(chat_id)
                time.sleep(0.5)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")

# --- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ---
scheduler = BackgroundScheduler(timezone=tz)
scheduler.add_job(send_reminders, CronTrigger(hour=15, minute=0, timezone=tz))
scheduler.start()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...", flush=True)
bot.polling(none_stop=True)